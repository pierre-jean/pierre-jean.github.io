<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Pierre-Jean's Yabage</title>
        <description>Pierre-Jean's Yabage - Pierre-Jean Baraud</description>
        <link>http://pierre-jean.github.io</link>
        <link>http://pierre-jean.github.io</link>
        <lastBuildDate>2014-05-07T12:56:37+02:00</lastBuildDate>
        <pubDate>2014-05-07T12:56:37+02:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Docker</title>
                <description>&lt;h2 id='what_is_docker'&gt;What is Docker?&lt;/h2&gt;

&lt;p&gt;It took me a while to really get what is Docker. Some people will present it as a light-view containers, and compare it to classic virtual machines. Other will present it as a way to deploy easily a software environment, and compare it to Chef. It&amp;#8217;s actually both, and more.&lt;/p&gt;

&lt;p&gt;Docker provides features for creating &lt;em&gt;agnostic&lt;/em&gt; light-view containers, that can be can be shared, modified, and commit to repositories. You can see it as a git version controller for app environments.&lt;/p&gt;

&lt;p&gt;Docker is based on technologies such as LXC, group control, and union file system.&lt;/p&gt;

&lt;h3 id='docker_is_lightview'&gt;Docker is light-view&lt;/h3&gt;

&lt;p&gt;Docker is light-view as it relies on the host kernel, and only cares about encapsulate the user-space environment that your process depends on. As a consequence, the overhead is minimal compare to a virtual machine, where an hypervisor has to communicate between the virtual machines and the host OS.&lt;/p&gt;

&lt;h3 id='docker_is_safe'&gt;Docker is safe&lt;/h3&gt;

&lt;p&gt;Once you build your image, you know for sure that you code will have exactly the same behaviour wherever you deploy it. Each container is completely independent of the host, as a virtual machine would be. Even if does not provide as much encapsulation as a VM (it runs on the same kernel), you can be confident about security if you configured it well.&lt;/p&gt;

&lt;h3 id='docker_is_social'&gt;Docker is social&lt;/h3&gt;

&lt;p&gt;Docker is based on a union file system, that you can see as layers. Each change is done on the top layer, that can be commit and shared with other. Thanks to the docker repository, you can base your own images on images shared by others.&lt;/p&gt;

&lt;h2 id='why_use_docker'&gt;Why use Docker?&lt;/h2&gt;

&lt;p&gt;I will try to explain a case scenario for a geek particular as me, and in a second part for a company.&lt;/p&gt;

&lt;h3 id='for_an_individual_geek_person'&gt;For an individual (geek) person&lt;/h3&gt;

&lt;p&gt;I have a few home servers and remote servers. As a geek, I try to install a lot of services on it (mail, project managers, blog frameworks, ans so on&amp;#8230;). And as you can guess, all installations are not as smooth as a simple “apt-get install”.&lt;/p&gt;

&lt;p&gt;Have you never spend hours to read several “How To” posts on internet to fix some broken installation? Modify the configurations, add dependency manually, re-compile, create databases to make your product work? And most of the time, many of these services aren’t used after a while, and are just partially uninstalled&amp;#8230;&lt;/p&gt;

&lt;p&gt;Well, this situation induces several issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It will be extremely to re-install the same services in other platform, as it involves a lot of manual steps&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;It will also be difficult to clean after removing your service, as you have done a lot of manual actions.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;You may have security breaches. When you install a service to try it for a while, you don’t always focus on configuring it in a secure way. But as the app is hosted on the same system as other services with potential sensitive information, you are at risk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two issues can be addressed with tools like Chef or Puppet, that automate environments setup through files called “recipes”. The third issue can be fixed by installing your service inside a dedicated virtual machine.&lt;/p&gt;

&lt;p&gt;Using Chef or Puppet will certainly help, but the result won’t be as certain as using Docker. Indeed, Chef/Puppet rely on the host system, and you can bump on some unexpected specificity. And you will have to solve them. Docker is using a container with all the user space image, and as a consequence you have the &lt;strong&gt;guarantee&lt;/strong&gt; that you will deploy on the same environment. On the other side, Chef or Puppet will be much more efficient in term of space as they don’t encapsulate anything: they use and share dependencies across the system.&lt;/p&gt;

&lt;p&gt;Most of the time, though, people use Chef or Puppet on fresh VM, to address the third problem mentioned: encapsulation and security. And using a virtual machine implies a lot of overhead, maybe too much if the goal is just to have nice encapsulate environments. Docker magic is that it uses light-view containers that rely on the host OS, and just bring what is needed for the service to run independently. It will be really fast to launch, as you don’t have to boot a virtual OS.&lt;/p&gt;

&lt;p&gt;A point of attention, though: in Docker, you create a container per service, contrary to a virtual machine which may handle several parallel services (running processes).&lt;/p&gt;

&lt;h3 id='for_a_company'&gt;For a company&lt;/h3&gt;

&lt;p&gt;When you are a company, you have a specialised dedicated hardware (Solaris servers, embedded or exotic machines) to run your services, and your developers work on more common machines such as laptop or desktop computers.&lt;/p&gt;

&lt;p&gt;When the developers code some new features, they test them locally, they may have local unit tests, and maybe a dedicated machine to run integration tests. And then the code is deployed to the production machines.&lt;/p&gt;

&lt;p&gt;This situation implies that the environment between the developer machine and the production machine may be really different, and some problems can occurred only in Production, which make them difficult to prevent and/or fix. If you use containers, you have the guarantee that your code will behave the same in your laptop and in your server, and you can setup your prod environment in a few seconds, just by running the corresponding containers.&lt;/p&gt;

&lt;p&gt;And it goes the other way, once you created your containers on your laptop, you can send them “as is” to the production.&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Docker is no magic bullet, but it is an elegant and pertinent solution for many use case. It was built upon standard Linux features like cgroups, LXC and AUFS. Note that since version 0.9, the default container engine isn’t LXC but libcontainer, in order to make Docker more portable and be able to run on a wide range of host OS.&lt;/p&gt;</description>
                <link>http://pierre-jean.github.io/introduction/2014/05/06/docker_introduction</link>
                <guid>http://pierre-jean.github.io/introduction/2014/05/06/docker_introduction</guid>
                <pubDate>2014-05-06T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>I migrate to Jekyllrb</title>
                <description>&lt;h2 id='from_wordpress_to_jekyll'&gt;From Wordpress to Jekyll&lt;/h2&gt;

&lt;p&gt;I started a blog a few month ago with the framework wordpress, but I was not convinced about the user interface. For instance, here are a few drawbacks that annoyed me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default templates are a little bit primitive, and you have to download and install new ones for custom layouts (recipies, etc.)&lt;/li&gt;

&lt;li&gt;Creating a template is a heavy process, requiring some knowledge in PHP language: I don&amp;#8217;t know very much about PHP, and frankly, I&amp;#8217;m not really interested to learn it for the basic purpose of blogging. I would have prefer some more modern/sexy web technology if I have to dig into it (javascript frameworks, dart, python, ruby &amp;#8230;).&lt;/li&gt;

&lt;li&gt;No version-control by default&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wordpress is still a really nice framework, but it didn&amp;#8217;t fit me needs. I started to look for newer blogging framework, and I discover Jekyll.&lt;/p&gt;

&lt;h2 id='jekyll_the_revelation'&gt;Jekyll, the revelation&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Jekyll&lt;/span&gt; is a static blog-aware site generator. It is really simple to setup, and extremely flexible. Here are the main reasons you should be interested in Jekyll:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It uses great tools, already well-known by the developers community.&lt;/li&gt;

&lt;li&gt;It is a static web site, so you can drop your site on any service that give you an accessible share from internet. It does &lt;em&gt;not request&lt;/em&gt; any special language support (PHP, ruby, python&amp;#8230;).&lt;/li&gt;

&lt;li&gt;You can host it for free on the very cool service &lt;span&gt;github.io&lt;/span&gt;, and even access it with your own domain name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I said Jekyll uses well know tools and language loved by developers. Here are they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;span&gt;markdown&lt;/span&gt;&lt;/strong&gt;: If you don&amp;#8217;t know Markdown yet, well, you should! Markdown is a text syntax that can be easily turned into html, but focus on readability in plain text format. It&amp;#8217;s really intuitive, elegant and efficient. You can find the details of the syntax &lt;span&gt;here&lt;/span&gt;.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;span&gt;textile&lt;/span&gt;&lt;/strong&gt;: If for a any reason you prefered textile, an alternative to markdown, it is also supported by default.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;span&gt;YAML front-matter&lt;/span&gt;&lt;/strong&gt;: Setting some YAML front-matter at the beginning of your article allow you to specify a lot of variables (the type, the title, the layout, &amp;#8230;), that can be used to really tune the behaviour of your site.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;span&gt;Ruby&lt;/span&gt;&lt;/strong&gt;: Even if I&amp;#8217;m not a ruby developper, I couldn&amp;#8217;t deny that it&amp;#8217;s a exciting language. It is also pretty easy to understand if you have to modify some plugins. Indeed, Jekyll can be extented with ruby scripts, that will add more features when you generate your site.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;&lt;span&gt;Git&lt;/span&gt;&lt;/strong&gt;: Even if It&amp;#8217;s not mandatory, the framework is really design to integrate easily with the decentralized version control Git, which is one of the more used in recent collaborative project.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='ready_to_use_jekyll_bootstrap_octopress'&gt;Ready to use: Jekyll Bootstrap, Octopress&lt;/h2&gt;

&lt;p&gt;By default, jekyll comes with really simple theme, and not a lot of feature. Even if setting up new features (comments, themes, templates, &amp;#8230;) is straightforward, I decided to save some time and clone the git repository of &lt;span&gt;Jekyll Bootstrap&lt;/span&gt;, which include these features.&lt;/p&gt;

&lt;p&gt;I bought on the site &lt;span&gt;wrapbootstrap.com&lt;/span&gt; a CSS bootstrap template for blog, that I adapt for jekyll. I spent a little more time than expected to get the exact result I wanted, but it worth it! I also had to fix a minor bug on the comments plugin provider.&lt;/p&gt;

&lt;p&gt;I discovered a little bit too late the framework &lt;span&gt;Octopress&lt;/span&gt;, which seems exactly what I wanted, and that I would recommand to anyone starting a blog with jekyll.&lt;/p&gt;

&lt;h2 id='to_do'&gt;To do&lt;/h2&gt;

&lt;p&gt;I still have unfinished tasks for the blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As I create my own theme for Jekyll, there is some depencies between the theme and my layout, which shouldn&amp;#8217;t exist if I would have create a clean generic template to be deployed for any blog. I don&amp;#8217;t know if Octopress is more obvious in its architecture, but I found on Jekyll Bootstrap that it can sometimes be tricky to choose what should be in the theme and what should be in the blog layout.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I used some private plugin on Jekyll (to generate a tag cloud for instance), which isn&amp;#8217;t supported on github. I still host my code on github, but I have to publish the generated site and the source code on different git branches to have the blog accessible on &lt;span&gt;http://pierre-jean.github.io&lt;/span&gt;. Actually, I host it on my own server, but it could be usefull to really host it on github.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Publishing the blog require manual step (SSH connection to my server, and run the command to pull/push from git and generate the static content): all of these could be automated.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a conclusion, I&amp;#8217;m very happy to be able to finally write my post on markdown, and simply commit them with git. If you are a developper, you really should enjoy jekyll! If you have any advices/tweak/opinions, feel free to share them with a comment!&lt;/p&gt;</description>
                <link>http://pierre-jean.github.io/Programming/2013/10/01/migration_to_jekyll</link>
                <guid>http://pierre-jean.github.io/Programming/2013/10/01/migration_to_jekyll</guid>
                <pubDate>2013-10-01T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Little tricks with adb</title>
                <description>&lt;p&gt;I wanted to use earlier today my hardware device (a Sony Ericsonn Xperia Pro phone), to test some android developments on it. As it&amp;#8217;s been a long time since my last development on android, I only had blury memories on how things work.&lt;/p&gt;

&lt;p&gt;I bumped on an error, here is how I solved it.&lt;/p&gt;

&lt;h2 id='check_the_device_connection'&gt;Check the device connection&lt;/h2&gt;

&lt;p&gt;To connect your phone through USB cable and be able to debug your app on it, you have to follow the steps described on &lt;a href='http://developer.android.com/tools/device.html'&gt;the official documentation&lt;/a&gt;. Basically, it&amp;#8217;s&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;enable USB debugging&lt;/strong&gt; on your device,&lt;/li&gt;

&lt;li&gt;on Linux, &lt;strong&gt;adding some udev rules&lt;/strong&gt; on &lt;code&gt;/etc/udev/&lt;/code&gt;: for an Sony Ericsson phone, create an executable file with the following content: &lt;code&gt;shell
 SUBSYSTEM==&amp;quot;usb&amp;quot;, ATTR{idVendor}==&amp;quot;0fce&amp;quot;, MODE=&amp;quot;0666&amp;quot;, GROUP=&amp;quot;plugdev&amp;quot;
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;finally, &lt;strong&gt;connect your phone and check&lt;/strong&gt; if everything works fine with: &lt;code&gt;sh
 adb devices
&lt;/code&gt; &lt;br /&gt;You should have adb in your path to launch the command, otherwise, go to your sdk folder, and launch the &lt;code&gt;adb&lt;/code&gt; executable from the &lt;code&gt;platform-tools&lt;/code&gt; subfolder.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunally, you can get this error when launching the last command: &lt;code&gt;sh
List of devices attached
????????????  no permissions
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id='how_to_resolve_it'&gt;How to resolve it&lt;/h2&gt;

&lt;p&gt;If you have a rooted device as I do, you should launch the adb service as root. The service is automatically launch on the first call of adb.&lt;/p&gt;

&lt;p&gt;You can launch the following command as root, or as the user who launch adb on the first place:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sh
adb kill-server
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Nevertheless, for me this command didn&amp;#8217;t seem to kill the service, though it was runned without error. If you are on the same case, you can launch as root:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shell
killall adb
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Than, as root, launch:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash
adb start-server
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, when executing again &lt;code&gt;adb devices&lt;/code&gt;, you should now see your device:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bash
List of devices attached
CBZ2J17V0 device
&lt;/code&gt;&lt;/p&gt;</description>
                <link>http://pierre-jean.github.io/programming/android/2013/08/25/little-tricks-with-adb</link>
                <guid>http://pierre-jean.github.io/programming/android/2013/08/25/little-tricks-with-adb</guid>
                <pubDate>2013-08-25T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Introduction to AngularJS</title>
                <description>&lt;p&gt;&lt;img alt='AngularJS logo' src='/assets/posts/angularjs/AngularJS.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;I discovered recently this exciting framework, and even if I&amp;#8217;m still a beginner in it, I presented it to my colleagues to share my enthusiasm. Here are the slides i used for the presentation.&lt;/p&gt;
&lt;div class='embed-container'&gt;
    &lt;iframe allowfullscreen='allowfullscreen' class='embed-frame' frameborder='0' src='//speakerdeck.com/player/7a7a33c0bb5301309b3a023921bdbc68?'&gt;speackerdeck presentation&lt;/iframe&gt;
  &lt;/div&gt;</description>
                <link>http://pierre-jean.github.io/programming/angularjs/2013/08/17/introduction-to-angularjs</link>
                <guid>http://pierre-jean.github.io/programming/angularjs/2013/08/17/introduction-to-angularjs</guid>
                <pubDate>2013-08-17T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Be passionate!</title>
                <description>&lt;h2 id='live_your_passionnow'&gt;Live your passion&amp;#8230;now&lt;/h2&gt;

&lt;p&gt;I am a cautious person. I like to weigh pros and cons before making a choice. I always prevailed adaptability over personal beliefs. But if I learned one thing in the last few years, it&amp;#8217;s that being &lt;strong&gt;good is all about passion&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are plenty of average software developers considering development as a job. There is nothing wrong about that. But if you really want to learn and progress, you should focus on people who live their passion.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t be afraid to take the risk of following your dream. If you really do what you believe in, you will be 200% more efficient! I know this might sound naive, but it&amp;#8217;s not: you only have one life, don&amp;#8217;t realize too late it&amp;#8217;s not the one you want.&lt;/p&gt;

&lt;h2 id='you_have_the_potential_to_improve'&gt;You have the potential to improve&lt;/h2&gt;

&lt;p&gt;Courage is about trusting yourself. Don&amp;#8217;t hide your weakness. &lt;strong&gt;Share&lt;/strong&gt; what you know. Focus on what you have to learn: there is a world of knowledge waiting for you, and you should be excited about it!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m a truly bad example on this, but it&amp;#8217;s never too late to change: open-source projects are a very cool way to become better. It&amp;#8217;s about taking initiatives, accepting unpleasant remarks, learning and improving!&lt;/p&gt;

&lt;h2 id='read_read_read_and_participate'&gt;Read, read, read and participate!&lt;/h2&gt;

&lt;p&gt;There is a looong list of fascinating people out there who inspire me every day. But for this post, I will focus on one: Jeff Atwood, the guy who created the Stack Exchange framework (and the well-known website that use it: &lt;a href='http://stackoverflow.com'&gt;stackoverflow.com&lt;/a&gt;). &lt;a href='http://www.codinghorror.com/blog/' title='Coding Horror Blog'&gt;His blog&lt;/a&gt; and &lt;a href='http://www.codinghorror.com/blog/2012/07/coding-horror-the-book.html' title='Books section of coding horror'&gt;his books&lt;/a&gt; really impacted me on how to become better on what I do. (for French speakers, some articles from &lt;a href='http://vincent.jousse.org/' title='Blog de Vincent Jousse'&gt;this blog&lt;/a&gt; will have the same spirit of motivation).&lt;/p&gt;

&lt;p&gt;Encouraged by some friends, I decided to start a blog, because it&amp;#8217;s a good exercise for a developer: writing instead of reading, producing instead of consuming. It forces involvement in your passion, and I really hope to learn about this experience.&lt;/p&gt;

&lt;h2 id='if_you_dont_believe_mebelieve_him'&gt;If you don&amp;#8217;t believe me&amp;#8230;believe him!&lt;/h2&gt;

&lt;p&gt;On a lighter note, I let Schwarzenegger sum up my speech:&lt;/p&gt;
&lt;div class='embed-container'&gt;
    &lt;iframe allowfullscreen='allowfullscreen' class='embed-frame' frameborder='0' src='http://www.youtube.com/embed/vH0nP4NzS9M'&gt;youtube video: http://www.youtube.com/embed/vH0nP4NzS9M&lt;/iframe&gt;
  &lt;/div&gt;</description>
                <link>http://pierre-jean.github.io/opinion/2013/08/10/be-passionate</link>
                <guid>http://pierre-jean.github.io/opinion/2013/08/10/be-passionate</guid>
                <pubDate>2013-08-10T00:00:00+02:00</pubDate>
        </item>


</channel>
</rss>
