<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yabage]]></title>
  <link href="http://pierre-jean.github.io/atom.xml" rel="self"/>
  <link href="http://pierre-jean.github.io/"/>
  <updated>2014-05-14T22:01:44+02:00</updated>
  <id>http://pierre-jean.github.io/</id>
  <author>
    <name><![CDATA[Pierre-Jean Baraud]]></name>
    <email><![CDATA[pierre-jean@baraud.fr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A First Look Into Dockerfiles]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/14/deeper-look-dockerfile/"/>
    <updated>2014-05-14T14:45:54+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/14/deeper-look-dockerfile</id>
    <content type="html"><![CDATA[<p>A <a href="http://pierre-jean.baraud.fr/blog/2014/05/07/docker/">week ago</a>, I introduced the framework <a href="http://docker.io">Docker</a>. Docker is a lightview virtualized environment. It allows to build, managed and run containers to deploy easily an app in an iso environment.
I will introduce today how to create containers interactively and through Dockerfile.</p>

<!-- More -->


<h2>Hands on containers and images</h2>

<p>If you&rsquo;re not familiar with Docker, I strongly recommand you to have a look to their <a href="https://www.docker.io/gettingstarted/#">interactive tutorial</a>. It is well done, efficient, and get you into the swing of things. The <a href="https://www.docker.io/learn/dockerfile/">Dockerfile tutorial</a> will also give you all the basis. I will try here to sum up the more important concepts.</p>

<h3>What is a container?</h3>

<p>A container can be represented by two main components:</p>

<ul>
<li>A running job</li>
<li>A filesystem modified by the job</li>
</ul>


<p>The filesystem itself is a multilayered union filesystem, with the top layer saving the current modifications, and the underlying layers read only images. Let&rsquo;s have a deeper look on what is a multilayered union filesystem.</p>

<h3>Images and AUFS</h3>

<p>Let&rsquo;s build our own customized image! First of all, let&rsquo;s pull an image from the docker index.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker pull ubuntu:precise</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will download an image with the files of Ubuntu Precise distribution (without the Kernel, as it uses the host kernel).</p>

<p><img src="http://pierre-jean.github.io/images/docker/docker-image-creation-00.png"></p>

<p>We will then interact with it by launching a job from this filesystem.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker run ubuntu apt-get install -y memcached</span>
</span><span class='line'><span class="go">[...]</span>
</span><span class='line'><span class="go">[=&gt; container id is 9fb69e798e67]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When executing this command, we create a container. This container will create a writable layer for its filesystem, and base it upon the image <em>ubuntu</em>. It will then launch the process <code>apt-get</code> with the argument <code>install -y memcached</code></p>

<p><img src="http://pierre-jean.github.io/images/docker/docker-image-creation-01.png"></p>

<p>I didn&rsquo;t affect any name to the container, but the output gave me its id. If I want to save the current state of the filesystem, I can commit it thanks to the id of the container:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker commit 9fb69e798e67</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://pierre-jean.github.io/images/docker/docker-image-creation-02.png"></p>

<p>And the container will automatically create another layer upon your newly created image. Note that you are only saving <strong>the filesystem state</strong>. The <strong>memory state won&rsquo;t be saved</strong> in the image.</p>

<p><img src="http://pierre-jean.github.io/images/docker/docker-image-creation-03.png"></p>

<p>Note also that the status of your container is depending of the status of the job your run. Once the job finished, the container is stopped.</p>

<p>If you want to organize your images, it is better to commit them under your local repository.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker commit 9fb69e798e67 yabage/ubuntu-memcached</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you can of course run a new container based on your newly created image, and commit other modification upon it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker run -i -t yabage/ubuntu-memcached /bin/bash</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://pierre-jean.github.io/images/docker/docker-image-creation-04.png"></p>

<h2>The Dockerfile</h2>

<p>You have seen how to build an image by interacting direclty with the container. Nevertheless, most of the time you will want to share your images through &ldquo;recipes&rdquo; allowing others to <strong>build</strong> themselves your images.
This is what <strong>Dockerfiles</strong> are for.</p>

<p>The Dockerfile lists the instruction on how to build your image and what to run on the container.</p>

<p>As you want to obtain the same image in every circonstances, you will have to <strong>avoid</strong> any operation that <strong>doesn&rsquo;t result in a controlled and guaranted state</strong>. For instance, you should not do any <code>apt-get upgrade</code> in a Dockerfile, as you don&rsquo;t controlled the result : indeed, depending the date your launching it, the upgrade could be different. Moreover, for technical reasons, there is a high chance that the upgrade fails. If you want to upgrade your distribution, you should update the base image your Dockerfile rely on.</p>

<p>Now let&rsquo;s see how to build the first container in a Dockerfile:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM ubuntu:precise #the base image of this build script
</span><span class='line'>
</span><span class='line'>RUN apt-get install -y memcached</span></code></pre></td></tr></table></div></figure>


<p>Well&hellip;that&rsquo;s all. You know have a container with memcached installed.</p>

<p>I kept this Dockerfile minimalistic on purpose, put you will want to define the maintainer of the Dockerfile with the tag <code>MAINTAINER</code>, define the default process to launch with <code>CMD</code> and a lot of other usefull instructions.
For now I will stick to this version.</p>

<p>I would like to focus your attention on a point: each RUN instruction will commit the current layer and create a new one upon it. <strong>The state of the memory is forgotten</strong> between two <code>RUN</code> instructions. Only the filesystem is kept.</p>

<p>To build an image, you put these instructions in a file called <em>Dockerfile</em>, then executes from the same folder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo docker build .</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will build the container and return its id. If you want to name the container when building, you can do it with the <code>-t</code> option</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo docker build -t ubuntu-memcached .</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have seen a very quick introduction to Dockerfile. I will soon write an article about how to write a proper Docker image, following good practices, so that you can share them with your friends and the community!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Isometric 3D]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/13/3d-iso-introduction/"/>
    <updated>2014-05-13T17:09:50+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/13/3d-iso-introduction</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://pierre-jean.github.io/images/iso/iso-result-mini.png" title="" ></p>

<p>You want to create a nice graphic presentation, but you don&rsquo;t know anything about design? You need to create some nice game graphic elements, but you&rsquo;re really bad at  drawing?</p>

<p>Isometric 3D allows you to create really nice elements without knowing anything about design or art. In a few steps you can obtain really nice results.</p>

<!-- More -->


<h2>A simple square</h2>

<p>Let&rsquo;s try to create a square in isometric projection.</p>

<h3>The editor</h3>

<p>I will use the great vector graphics editor <a href="http://www.inkscape.org/">Inkscape</a>, that I have been fond of for years.
Inkscape is free, open-source, multi-platform (Windows, Mac, Linux) and uses the standard format SVG. Many browser can open directly SVG files.</p>

<p>Vector graphics allows you to draw &ldquo;shapes&rdquo; instead of &ldquo;pixels&rdquo;, so you can zoom infinitely without losing precision. Another well known vector graphic editor is Adobe Illustrator.</p>

<p>My instructions will be for Inkscape, but the principles can be applied in any other vectorial or bitmap editor.</p>

<h3>Simple square</h3>

<p>Let&rsquo;s see how to draw a simple square in isometric projection. Open Inkscape and follow these instructions:</p>

<ul>
<li>Select the <strong>rectangle tool</strong> on the left (<strong>F4</strong> on Linux)</li>
<li>Maintain the key <strong>Ctrl</strong> pressed and draw the square. <em>Ctrl</em> will maintain proportions to obtain a square.</li>
</ul>


<p> <img src="http://pierre-jean.github.io/images/iso/iso-screen-01.png"></p>

<ul>
<li>Then, select the <strong>shape edition tool</strong> (<strong>F2</strong>) or click once in your square to enable the shape modification.</li>
<li>Select the upper node and while maintaining <strong>Ctrl</strong> key, skew the square 2 steps to the right. Another method is using the Transform dialog (menu <strong>Object/Transform</strong> or <strong>Shift+Ctrll+M</strong>) and skew horizontally by 30°.</li>
</ul>


<p> <img src="http://pierre-jean.github.io/images/iso/iso-screen-02.png"></p>

<ul>
<li>Finally, Select again the <strong>shape edition tool</strong> (<strong>F2</strong>), and while maintaining the <strong>Ctrl</strong> key, rotate 2 steps to the right. Another method is to use the Transform dialog and rotate by 30°.</li>
</ul>


<p> <img src="http://pierre-jean.github.io/images/iso/iso-screen-03.png"></p>

<p>You now have a nice square in isometric perspective.</p>

<h3>Add Text</h3>

<p>All transformation done to the square can be applied to text too. As a consequence following previous steps:</p>

<ul>
<li>Select <strong>Text tool</strong> (<strong>F8</strong>), and write something.</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-04.png"></p>

<ul>
<li>Skew to the right by 30°.</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-05.png"></p>

<ul>
<li>Rotate to the right by 30°</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-06.png"></p>

<p>You now have shapes and text on the same perspective.</p>

<h3>Add other faces</h3>

<p>By changing the direction of skew or rotation, you can add shapes on the 2 others plans of isometric projection.</p>

<ul>
<li>Create another rectangle</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-07.png"></p>

<ul>
<li>Skew it to the left this time</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-08.png"></p>

<ul>
<li>Rotate it to the right</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-09.png"></p>

<ul>
<li>Notice that if you want to resize your square once on a isometric plan, you can use the square tool once your square selected (or press <strong>F4</strong>) and you&rsquo;ll be able to resize it in the plan by grabbing the corners.</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-10.png"></p>

<ul>
<li>You do the same with the other rectangle, but by skewing it to the right and rotating it to the left</li>
</ul>


<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-11.png"></p>

<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-12.png"></p>

<p><img src="http://pierre-jean.github.io/images/iso/iso-screen-13.png"></p>

<p>By playing with the colors of the different squares, you can obtain a nice impression of volume, without effort or knowledge.</p>

<h3>Be creative</h3>

<p>You can apply this to disc shapes as well and create complete world in isometric projection!</p>

<p><img src="http://pierre-jean.github.io/images/iso/iso-example.png"></p>

<p>Be aware, though, that this method isn&rsquo;t an efficient way to create graphs for report. You can find many specialized tools dedicated to this task. But by drawing from scratch you have a total freedom on the result. Your imagination is your only limit!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Train Your Java Skills]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/12/train-your-skills/"/>
    <updated>2014-05-12T21:04:02+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/12/train-your-skills</id>
    <content type="html"><![CDATA[<p>Want to train your Java developer skills? Having an interview to prepare? Just want to refresh your memory on theory or evaluate your current knowledge?</p>

<p>Here are some sites to help you.</p>

<!-- More -->


<h2>Questions sets</h2>

<p>You can find on internet many websites with some interview questions. Here are two I personally selected:</p>

<h3>Udemy Top 15 questions article</h3>

<p><a href="https://www.udemy.com/blog">Udemy</a> wrote an <a href="https://www.udemy.com/blog/java-interview-questions/">article about the top 15 questions</a> asked on Java interviews. This article presents really classic questions that you pretty sure to be asked about, or at least for which you should know the answer before going to an interview.</p>

<h3>JavaTpoint 170 core Java questions article</h3>

<p>If you want a more extended set of question than the previous article, you can read <a href="http://www.javatpoint.com/corejava-interview-questions">the 170 core Java questions article</a> by <a href="http://www.javatpoint.com/">JavaTpoint</a>.</p>

<p>This questions cover a large part of core Java (basic) knowledge, and they come with nicely written answers.</p>

<h2>Interactive problems</h2>

<p>Finally, a language knowledge is nothing if you don&rsquo;t master algorithms. <a href="https://codility.com/">Codility</a> is a website that aims to be used by companies to select candidates through coding exercices, but they provide <a href="https://codility.com/programmers/lessons/">a nice training section</a> where you can practices your skills on exercices and problems.</p>

<p><img src="http://pierre-jean.github.io/images/app-screenshots/codility-screenshot.png"></p>

<p>It&rsquo;s free, and really well designed!</p>

<p>If you know any other source of training, feel free to share them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update OVH DynHost Address From Linux]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/09/update-ovh-dynhost-address-from-linux/"/>
    <updated>2014-05-09T21:45:39+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/09/update-ovh-dynhost-address-from-linux</id>
    <content type="html"><![CDATA[<p>I have my domain name registered at <a href="http://www.ovh.com">OVH</a>. To update a DNS address from a machine behind a dynamic IP, they provide a feature called <strong>DynHost</strong>. DynHost uses the same protocol as DynDNS for updating their website.</p>

<!-- More -->


<p>From your DNS Section of the <a href="https://www.ovh.com/managerv3">OVH manager webapp</a>, you can create a DynHost account: you will have to specify the DNS address you want to update, a username and password for this account.</p>

<p><strong>Warning</strong>: The script that update your DynHost address sends your login and password uncrypted! Don&rsquo;t use the same login/password as your main OVH Manager account.</p>

<p>Once created, you can configure your home server to update your DynHost.</p>

<h2>Configure Updatedd</h2>

<p>Updatedd is an utility recommended by OVH to update your address from Linux. You can find it <a href="http://nongnu.askapache.com/updatedd/updatedd_2.6.tar.gz">here</a>.</p>

<p>Get the sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ wget http://nongnu.askapache.com/updatedd/updatedd_2.6.tar.gz</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you will have to fix an error in a configuration file before compile it.
Extract and edit the libovh file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ tar xvf updatedd_2.6.tar.gz</span>
</span><span class='line'><span class="go">~$ nano updatedd-2.6/src/plugins/libovh.h</span>
</span></code></pre></td></tr></table></div></figure>


<p>And replace the host <strong>ovh.com</strong> on line 24 by <strong>www.ovh.com</strong>. You should have:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>define DYNDNSHOST "www.ovh.com"</span></code></pre></td></tr></table></div></figure>


<p>We can now compile updatedd:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ ./configure</span>
</span><span class='line'><span class="go">~$ make</span>
</span><span class='line'><span class="go">~$ sudo make install</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now use updatedd to update your domain name with the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">updatedd ovh -- --ipv4 yourIP dynHostUsername:dynHostPassword host</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Automate the DynHost Update</h2>

<p>To update your account, create a script and run it on a daily base with cron.</p>

<p>Create a Script with this content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c">## dynhost parameters</span>
</span><span class='line'><span class="nv">username</span><span class="o">=</span>dynHostUser
</span><span class='line'><span class="nv">password</span><span class="o">=</span>dynHostPassword
</span><span class='line'><span class="nv">host</span><span class="o">=</span>yourmain.com
</span><span class='line'>
</span><span class='line'><span class="c">##Log (1=true,0=false)</span>
</span><span class='line'><span class="nv">log_change</span><span class="o">=</span>1
</span><span class='line'><span class="nv">log_no_change</span><span class="o">=</span>0
</span><span class='line'><span class="nv">log_file</span><span class="o">=</span>/var/log/dynhost.log
</span><span class='line'>
</span><span class='line'><span class="c">#File with old IP</span>
</span><span class='line'><span class="nv">old_ip_file</span><span class="o">=</span>/var/cache/ip_old
</span><span class='line'>
</span><span class='line'>touch <span class="k">${</span><span class="nv">old_ip_file</span><span class="k">}</span>
</span><span class='line'>touch <span class="k">${</span><span class="nv">log_file</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Get public IP</span>
</span><span class='line'><span class="nv">ip</span><span class="o">=</span><span class="s2">&quot;`dig +short myip.opendns.com @resolver1.opendns.com`&quot;</span>
</span><span class='line'><span class="nv">ip_old</span><span class="o">=</span><span class="sb">`</span>cat <span class="k">${</span><span class="nv">old_ip_file</span><span class="k">}</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Compare IP</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${ip}&quot;</span> <span class="o">=</span> <span class="s2">&quot;${ip_old}&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then </span>
</span><span class='line'><span class="k">   if</span> <span class="o">[</span> <span class="s2">&quot;${log_no_change}&quot;</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>
</span><span class='line'>   <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="sb">`</span>date<span class="sb">`</span>: No IP change was found &gt;&gt; <span class="k">${</span><span class="nv">log_file</span><span class="k">}</span>
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">ip</span><span class="k">}</span> &gt; <span class="k">${</span><span class="nv">old_ip_file</span><span class="k">}</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;${log_change}&quot;</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span>
</span><span class='line'>   <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="s2">&quot;`date`:IP has changed. (Old : ${ip_old}, New : ${ip})&quot;</span> &gt;&gt; <span class="k">${</span><span class="nv">log_file</span><span class="k">}</span>
</span><span class='line'>      updatedd ovh -- --ipv4 <span class="k">${</span><span class="nv">ip</span><span class="k">}</span> <span class="k">${</span><span class="nv">username</span><span class="k">}</span>:<span class="k">${</span><span class="nv">password</span><span class="k">}</span> <span class="k">${</span><span class="nv">host</span><span class="k">}</span> &gt;&gt; <span class="k">${</span><span class="nv">log_file</span><span class="k">}</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'><span class="k">      </span>updatedd ovh -- --ipv4 <span class="k">${</span><span class="nv">ip</span><span class="k">}</span> <span class="k">${</span><span class="nv">username</span><span class="k">}</span>:<span class="k">${</span><span class="nv">password</span><span class="k">}</span> <span class="k">${</span><span class="nv">host</span><span class="k">}</span>
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to change DynHost parameters with yours in the script.</p>

<p>Make the script executable and put both updatedd and your script in a folder in your path. For instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ chmod +x yourscript </span>
</span><span class='line'><span class="go">~$ cp updatedd yourscript /usr/local/bin</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, put into your cron so that it is executed on a daily base (here every 30 minutes):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo <span class="nb">echo</span> <span class="s2">&quot;30  *    * * *   root    your-script&quot;</span> &gt;&gt; /etc/crontab
</span></code></pre></td></tr></table></div></figure>


<p>The steps and scripts described here have been adapted from <a href="http://lermit-informatique.blogspot.de/2009/08/ovh-le-dynhost-de-ovh-et-updatedd.html">this article</a>.
This steps should work for any provider supporting DynDNS protocol.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code and Play]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/08/code-and-play/"/>
    <updated>2014-05-08T20:46:08+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/08/code-and-play</id>
    <content type="html"><![CDATA[<p>Feel disconnected from the pleasure of code? Hacking is definitely less fun than what you expected as a teenager when watching Matrix?
Well, it&rsquo;s time to enjoy the fun of coding again, thanks to one of the projects I&rsquo;m going to present in this article!</p>

<h2>Untrusted, a meta-JavaScript adventure game</h2>

<p>Untrusted is a project developed by <a href="http://alex.nisnevich.com/portfolio/">Alex Nisnevich</a>, where you play in an ASCII art environment and interact in it with JavaScript code.</p>

<p><img src="http://pierre-jean.github.io/images/gaming/untrusted-screenshot.png"></p>

<p>This project was acclaimed by the community, and it is well deserved! You can try it <a href="https://alexnisnevich.github.io/untrusted/">here</a>, and get the source code on <a href="https://github.com/AlexNisnevich/untrusted/">github</a>. At the time of the writing of this article, the project has received 1518 stars from the github community, and has been forked 197 times!</p>

<!-- More -->


<p>As I am speaking of fork, I want to introduce the initiative of my friend <a href="http://www.janosgyerik.com/">Janos Gyerik</a>, <a href="https://github.com/janosgyerik/hangoverx">HangoverX</a>, that will allow you to go on enjoying playing this meta-JavaScript adventure game with a complete re-written storyline.</p>

<h2>CodinGame, game solving challenges</h2>

<p><a href="http://www.codingame.com/cg/">CodinGame</a> is a platform where you can enjoy many different challenges: Kirk&rsquo;s Quest, Skynet Revolution, The Last Crusade&hellip; The only way to win? Code the best solution!</p>

<p>The platform set up challenges during a limited period of time, but I strongly suggest to try they practice multiplayer games, available at anytime, to play with their nice web interface and train your skills! For instance, you can play to Tron battle, and code the best algorithm to be the last one on the ring!</p>

<p><img src="http://pierre-jean.github.io/images/gaming/tron-screenshot.png"></p>

<p>You will be able to choose your prefered language: Bash, C, C#, C++ Clojure, Dart, Go, Groovy, Haskell, Java, Javascript, ObjectiveC, Pascal, Perl, PHP, Python (2 &amp; 3), Ruby and Scala!</p>

<p>You can train your coded bot against the default AI, but the real interesting part is when you put it to the arena and fight against all other player algorithms, and/or choose some selected player to fight with!</p>

<p>Note that many challenges are sponsorized by game or software <a href="http://www.codingame.com/cg/#!contact">companies</a> that use these challenges to detect new talents! So, having fun and practicing your craft can actually benefit your career! what are you waiting for?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/07/docker/"/>
    <updated>2014-05-07T13:28:05+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/07/docker</id>
    <content type="html"><![CDATA[<p><img src="http://pierre-jean.github.io/images/docker/docker-logo.png"></p>

<h2>What is Docker?</h2>

<p>It took me a while to really get what <a href="https://www.docker.io">Docker</a> is. Some people will present it as a light-view containers manager, and compare it to classic virtual machines. Others will present it as a way to deploy easily a software environment, and compare it to Chef.
It&rsquo;s actually both, and more.</p>

<!-- more -->


<p>Docker provides features for creating <em>agnostic</em> light-view containers, that can be can be shared, modified, and commit to repositories.
You can see it as a git version controller for app environments and a way to execute this environments.</p>

<p>Docker is based on technologies such as LXC, group control, and union file system.</p>

<h3>Docker is light-view</h3>

<p>Docker is light-view as it relies on the host kernel, and only cares about encapsulating the user-space environment that your process depends on. As a consequence, the overhead is minimal compare to a virtual machine, where an hypervisor has to communicate between the virtual machines and the host OS.</p>

<h3>Docker is safe</h3>

<p>Once you have built your image, you know for sure that you code will have exactly the same behaviour wherever you deploy it. Each container is completely independent of the host, as a virtual machine would be. Even if does not provide as much encapsulation as a VM (it runs on the same kernel), you can be confident about security if you configured it well.</p>

<h3>Docker is social</h3>

<p>Docker is based on a union file system, that you can see as layers. Each change is done on the top layer, that can be commit and shared with other. Thanks to the docker repository, you can base your own images on images shared by others.</p>

<h2>Why use Docker?</h2>

<p>I will try to explain a case scenario for a geek individual as me, and in a second part for a company.</p>

<h3>For a (geek) individual</h3>

<p>I have a few home servers and remote servers. As a geek, I try to install a lot of services on it (mail, project managers, blog frameworks, ans so on&hellip;). And as you can guess, all installations are not as smooth as a simple “apt-get install”.</p>

<p>Have you never spend hours to read several “How To” posts on internet to fix some broken installation? Modify the configurations, add dependency manually, re-compile, create databases to make your product work? And most of the time, many  of these services aren’t used after a while, and are just partially uninstalled&hellip;</p>

<p>Well, this situation induces several issues:</p>

<ul>
<li><p>It will be extremely to re-install the same services in other platform, as it involves a lot of manual steps</p></li>
<li><p>It will also be difficult to clean after removing your service, as you have done a lot of manual actions.</p></li>
<li><p>You may have security breaches. When you install a service to try it for a while, you don’t always focus on configuring it in a secure way. But as the app may be hosted on the same system as other services with potential sensitive information, you are at risk.</p></li>
</ul>


<p>The first two issues can be addressed with tools like Chef or Puppet, that automate environment setup through files called “recipes”. The third issue can be fixed by installing your service inside a dedicated virtual machine.</p>

<p>Using Chef or  Puppet will certainly help, but the result won’t be as certain as using Docker. Indeed, Chef/Puppet rely on the host system, and you can bump on some unexpected specificity. And you will have to solve them. Docker embed in a container all the user space filesystem, and as a consequence you have the <strong>guarantee </strong> that you will deploy on the same environment. On the other side, Chef or Puppet will be much more efficient in term of space as they don’t encapsulate anything: they use and share dependencies across the system.</p>

<p>Most of the time, though, people use Chef or Puppet on fresh VM, to address the third problem mentioned: encapsulation and security. And using a virtual machine implies a lot of overhead, maybe too much if the goal is just to have nice encapsulated environments.
The magic of Docker is that it uses light-view containers that rely on the host OS, and just bring what is needed for the service to run independently.
It will be really fast to launch, as you don’t have to boot a virtual OS, unlike a virtual machine.</p>

<p>A point of attention, though: in Docker, you should create a container per service, contrary to a virtual machine which may handle several parallel services (running processes).</p>

<h3>For  a company</h3>

<p>When you are a company, you may have specialised dedicated hardware (Solaris servers, embedded or exotic machines) to run your services, and your developers certainly code on more common machines such as laptop or desktop computers.</p>

<p>When the developers code some new features, they test them locally, they may have local unit tests, and maybe a dedicated machine to run integration tests. And then the code is deployed to the production machines.</p>

<p>This situation implies that the environment between the developer machine and the production machine may be really different, and some problems can occurred only in production, which make them difficult to prevent and/or fix.
If you use containers, you have the guarantee that your code will behave the same in your laptop and in your server, and you can setup your prod environment in a few seconds, just by running the corresponding containers.</p>

<p>And it goes the other way around too: once you created your containers on your laptop, you can send them directly to production to be deployed.</p>

<h2>Conclusion</h2>

<p>Docker is no magic bullet, but it is an elegant and pertinent solution for many use case. It was built upon standard Linux features like cgroups, LXC and AUFS.  Note that since version 0.9, the default container engine isn’t LXC but libcontainer, in order to make Docker more portable and be able to run on a wide range of host OS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Migrate to Jekyllrb]]></title>
    <link href="http://pierre-jean.github.io/blog/2013/10/01/i-migrate-to-jekyllrb/"/>
    <updated>2013-10-01T12:55:56+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2013/10/01/i-migrate-to-jekyllrb</id>
    <content type="html"><![CDATA[<h2>From Wordpress to Jekyll</h2>

<p>I started a blog a few month ago with the framework wordpress, but I was not convinced about the user interface. For instance, here are a few drawbacks that annoyed me:</p>

<ul>
<li>The default templates are a little bit primitive, and you have to download and install new ones for custom layouts (recipies, etc.)</li>
<li>Creating a template is a heavy process, requiring some knowledge in PHP language: I don&rsquo;t know very much about PHP, and frankly, I&rsquo;m not really interested to learn it for the basic purpose of blogging. I would have prefer some more modern/sexy web technology if I have to dig into it (javascript frameworks, dart, python, ruby &hellip;).</li>
<li>No version-control by default</li>
</ul>


<p>Wordpress is still a really nice framework, but it didn&rsquo;t fit me needs. I started to look for newer blogging framework, and I discover Jekyll.</p>

<!-- more -->


<h2>Jekyll, the revelation</h2>

<p><a href="http://jekyllrb.com/">Jekyll</a> is a static blog-aware site generator. It is really simple to setup, and extremely flexible.
Here are the main reasons you should be interested in Jekyll:</p>

<ul>
<li>It uses great tools, already well-known by the developers community.</li>
<li>It is a static web site, so you can drop your site on any service that give you an accessible share from internet. It does <em>not request</em> any special language support (PHP, ruby, python&hellip;).</li>
<li>You can host it for free on the very cool service <a href="http://daringfireball.net/projects/markdown/syntax">github.io</a>, and even access it with your own domain name.</li>
</ul>


<p>I said Jekyll uses well know tools and language loved by developers. Here are they:</p>

<ul>
<li><strong><a href="http://daringfireball.net/projects/markdown/syntax">markdown</a></strong>: If you don&rsquo;t know Markdown yet, well, you should! Markdown is a text syntax that can be easily turned into html, but focus on readability in plain text format. It&rsquo;s really intuitive, elegant and efficient. You can find the details of the syntax <a href="http://daringfireball.net/projects/markdown/syntax">here</a>.</li>
<li><strong><a href="http://textile.sitemonks.com/">textile</a></strong>: If for a any reason you prefered textile, an alternative to markdown, it is also supported by default.</li>
<li><strong><a href="http://yaml.org/">YAML front-matter</a></strong>: Setting some YAML front-matter at the beginning of your article allow you to specify a lot of variables (the type, the title, the layout, &hellip;), that can be used to really tune the behaviour of your site.</li>
<li><strong><a href="http://www.ruby-lang.org/">Ruby</a></strong>: Even if I&rsquo;m not a ruby developper, I couldn&rsquo;t deny that it&rsquo;s a exciting language. It is also pretty easy to understand if you have to modify some plugins. Indeed, Jekyll can be extented with ruby scripts, that will add more features when you generate your site.</li>
<li><strong><a href="http://git-scm.com/">Git</a></strong>: Even if It&rsquo;s not mandatory, the framework is really design to integrate easily with the decentralized version control Git, which is one of the more used in recent collaborative project.</li>
</ul>


<h2>Ready to use: Jekyll Bootstrap, Octopress</h2>

<p>By default, jekyll comes with really simple theme, and not a lot of feature. Even if setting up new features (comments, themes, templates, &hellip;) is straightforward, I decided to save some time and clone the git repository of <a href="http://jekyllbootstrap.com/">Jekyll Bootstrap</a>, which include these features.</p>

<p>I bought on the site <a href="http://octopress.org/">wrapbootstrap.com</a> a CSS bootstrap template for blog, that I adapt for jekyll. I spent a little more time than expected to get the exact result I wanted, but it worth it!
I also had to fix a minor bug on the comments plugin provider.</p>

<p>I discovered a little bit too late the framework [Octopress][11], which seems exactly what I wanted, and that I would recommand to anyone starting a blog with jekyll.</p>

<h2>To do</h2>

<p>I still have unfinished tasks for the blog:</p>

<ul>
<li><p>As I create my own theme for Jekyll, there is some depencies between the theme and my layout, which shouldn&rsquo;t exist if I would have create a clean generic template to be deployed for any blog. I don&rsquo;t know if Octopress is more obvious in its architecture, but I found on Jekyll Bootstrap that it can sometimes be tricky to choose what should be in the theme and what should be in the blog layout.</p></li>
<li><p>I used some private plugin on Jekyll (to generate a tag cloud for instance), which isn&rsquo;t supported on github. I still host my code on github, but I have to publish the generated site and the source code on different git branches to have the blog accessible on [<a href="http://pierre-jean.github.io">http://pierre-jean.github.io</a>]. Actually, I host it on my own server, but it could be usefull to really host it on github.</p></li>
<li><p>Publishing the blog require manual step (SSH connection to my server, and run the command to pull/push from git and generate the static content): all of these could be automated.</p></li>
</ul>


<p> As a conclusion, I&rsquo;m very happy to be able to finally write my post on markdown, and simply commit them with git. If you are a developper, you really should enjoy jekyll! If you have any advices/tweak/opinions, feel free to share them with a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to AngularJS]]></title>
    <link href="http://pierre-jean.github.io/blog/2013/08/17/introduction-to-angularjs/"/>
    <updated>2013-08-17T12:13:23+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2013/08/17/introduction-to-angularjs</id>
    <content type="html"><![CDATA[<p><img src="http://pierre-jean.github.io/images/angularjs/AngularJS.jpg"></p>

<p>I discovered recently this exciting framework, and even if I&rsquo;m still a beginner in it, I presented it to my colleagues to share my enthusiasm.
Here are the slides i used for the presentation.</p>

<!-- more -->




<script async="true" class="speakerdeck-embed" data-id="7a7a33c0bb5301309b3a023921bdbc68" src="//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be Passionate]]></title>
    <link href="http://pierre-jean.github.io/blog/2013/08/10/be-passionate/"/>
    <updated>2013-08-10T16:46:47+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2013/08/10/be-passionate</id>
    <content type="html"><![CDATA[<h2>Live your passion&hellip;now</h2>

<p>I am a cautious person. I like to weigh pros and cons before making a choice. I always prevailed adaptability over personal beliefs. But if I learned one thing in the last few years, it&rsquo;s that being <strong>good is all about passion</strong>.</p>

<p>There are plenty of average software developers considering development as a job. There is nothing wrong about that. But if you really want to learn and progress, you should focus on people who live their passion.</p>

<!-- more -->


<p>Don&rsquo;t be afraid to take the risk of following your dream. If you really do what you believe in, you will be 200% more efficient! I know this might sound naive, but it&rsquo;s not: you only have one life, don&rsquo;t realize too late it&rsquo;s not the one you want.</p>

<h2>You have the potential to improve</h2>

<p>Courage is about trusting yourself. Don&rsquo;t hide your weakness. <strong>Share</strong> what you know. Focus on what you have to learn: there is a world of knowledge waiting for you, and you should be excited about it!</p>

<p>I&rsquo;m a truly bad example on this, but it&rsquo;s never too late to change: open-source projects are a very cool way to become better. It&rsquo;s about taking initiatives, accepting unpleasant remarks, learning and improving!</p>

<h2>Read, read, read and participate!</h2>

<p>There is a looong list of fascinating people out there who inspire me every day. But for this post, I will focus on one: Jeff Atwood, the guy who created the Stack Exchange framework (and the well-known website that use it: <a href="http://stackoverflow.com">stackoverflow.com</a>). <a href="http://www.codinghorror.com/blog/" title="Coding Horror Blog">His blog</a> and <a href="http://www.codinghorror.com/blog/2012/07/coding-horror-the-book.html" title="Books section of coding horror">his books</a> really impacted me on how to become better on what I do. (for French speakers, some articles from <a href="http://vincent.jousse.org/" title="Blog de Vincent Jousse">this blog</a> will have the same spirit of motivation).</p>

<p>Encouraged by some friends, I decided to start a blog, because it&rsquo;s a good exercise for a developer: writing instead of reading, producing instead of consuming. It forces involvement in your passion, and I really hope to learn about this experience.</p>

<h2>If you don&rsquo;t believe me&hellip;believe him!</h2>

<p>On a lighter note, I let Schwarzenegger sum up my speech:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/vH0nP4NzS9M "></iframe></div>



]]></content>
  </entry>
  
</feed>
