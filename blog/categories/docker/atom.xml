<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Yabage]]></title>
  <link href="http://pierre-jean.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://pierre-jean.github.io/"/>
  <updated>2014-05-19T09:54:40+02:00</updated>
  <id>http://pierre-jean.github.io/</id>
  <author>
    <name><![CDATA[Pierre-Jean Baraud]]></name>
    <email><![CDATA[pierre-jean@baraud.fr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A First Look Into Dockerfiles]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/05/14/fist-look-dockerfile/"/>
    <updated>2014-05-14T14:45:54+02:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/05/14/fist-look-dockerfile</id>
    <content type="html"><![CDATA[<p>A <a href="http://pierre-jean.baraud.fr/blog/2014/05/07/docker/">week ago</a>, I introduced the framework <a href="http://docker.io">Docker</a>. Docker is a lightview virtualized environment. It allows to build, manage and run containers to easily deploy an app in an iso environment.
I will introduce today how to create containers interactively and through Dockerfile.</p>

<!-- More -->


<h2>Hands on containers and images</h2>

<p>If you&rsquo;re not familiar with Docker, I strongly recommend you to have a look to their <a href="https://www.docker.io/gettingstarted/#">interactive tutorial</a>. It is well done, efficient, and get you into the swing of things. The <a href="https://www.docker.io/learn/dockerfile/">Dockerfile tutorial</a> will also give you all the basis. I will try here to sum up the more important concepts.</p>

<h3>What is a container?</h3>

<p>A container can be represented by two main components:</p>

<ul>
<li>A running job</li>
<li>A filesystem modified by the job</li>
</ul>


<p>The filesystem itself is a multilayered union filesystem, with the top layer saving the current modifications, and the underlying layers read only images. Let&rsquo;s have a deeper look on what is a multilayered union filesystem.</p>

<h3>Images and AUFS</h3>

<p>Let&rsquo;s build our own customized image! First of all, let&rsquo;s pull an image from the docker index.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker pull ubuntu:precise</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will download an image with the files of Ubuntu Precise distribution (without the Kernel, as it uses the host kernel).</p>

<p><img class="center" src="/images/docker/docker-image-creation-00.png"></p>

<p>You can have information about downloaded images with the command <code>docker images</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> sudo docker images
</span><span class='line'><span class="go">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span>
</span><span class='line'><span class="go">ubuntu               precise             74fe38d11401        3 weeks ago         209.6 MB</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We will then interact with it by launching a job from this filesystem.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker run ubuntu:precise apt-get install -y memcached</span>
</span><span class='line'><span class="go">[&amp;hellip;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When executing this command, we create a container. This container will create a writable layer for its filesystem, and base it upon the image <em>ubuntu:precise</em>. It will then launch the process <code>apt-get</code> with the argument <code>install -y memcached</code></p>

<p><img class="center" src="/images/docker/docker-image-creation-01.png"></p>

<p>I didn&rsquo;t affect any name to the container in the previous command. To find the id of a running container, you can type the command <code>docker ps</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker ps</span>
</span><span class='line'><span class="go">CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS              PORTS               NAMES</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here, I don&rsquo;t have any running container. Indeed, the status of the container is related to the status of its running job. As a consequence, once <code>apt-get install -y memcached</code> returned, the container is stopped.</p>

<p>To display all containers currently on your machine, you can type <code>docker ps -a</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker ps -a</span>
</span><span class='line'><span class="go">CONTAINER ID        IMAGE               COMMAND                CREATED              STATUS              PORTS               NAMES</span>
</span><span class='line'><span class="go">cab24787db86        ubuntu:12.04        apt-get install -y m   About a minute ago   Exit 0                                  clever_curie&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can now commit the content of the filesystem of this container into a new image:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker commit cab24</span>
</span><span class='line'><span class="go">9f97edd4e9ee794eca4c40db3122b5c635f0e2f92c3b0e62deaac9e28af1a868</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You will note that typing just the first digits of the id is enough to find it, as in git.</p>

<p>You image is now visible when you display your docker images:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker images</span>
</span><span class='line'><span class="go">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span>
</span><span class='line'><span class="go">&lt;none&gt;               &lt;none&gt;              9f97edd4e9ee        3 minutes ago       246.2 MB</span>
</span><span class='line'><span class="go">ubuntu               precise             74fe38d11401        3 weeks ago         209.6 MB</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can run a new container based on this new image:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker run &amp;mdash;name &amp;ldquo;bash-on-mysql-image&amp;rdquo; -i -t 9f97ed /bin/bash</span>
</span><span class='line'><span class="gp">root@1ddbe7cefb87:/#</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You will now run a new container, with the process <code>/bin/bash</code>, <code>-i</code> and <code>-t</code> options for respectively running it interactively and attaching a pseudo  tty, <code>--name</code> to name our container, that will put a writable layer upon our image 9f97edd, which is itself based on our images ubuntu:precise.</p>

<p><img class="center" src="/images/docker/docker-image-creation-03.png"></p>

<p>You may have understand now that referencing the images by their id won&rsquo;t be handy, That&rsquo;s why you will prefer to organize your images under</p>

<p>If you want to organize your images, it is better to commit them under your local repository.
You could have run this command to commit from the container:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker commit 9f97e yabage/ubuntu-memcached</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or you can tag the current image directly
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">~$ sudo docker tag 9f97e yabage/ubuntu-memcached</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>The Dockerfile</h2>

<p>You have seen how to build an image by interacting directly with the container. Nevertheless, most of the time you will want to share your images through &ldquo;recipes&rdquo; allowing others to <strong>build</strong> themselves your images.
This is what <strong>Dockerfiles</strong> are for.</p>

<p>The Dockerfile lists the instruction on how to build your image and what to run on the container.</p>

<p>As you want to obtain the same image in every circumstances, you will have to <strong>avoid</strong> any operation that <strong>doesn&rsquo;t result in a controlled and guaranted state</strong>. For instance, you should not do any <code>apt-get upgrade</code> in a Dockerfile, as you don&rsquo;t controlled the result : indeed, depending the date your launching it, the upgrade could be different. Moreover, for technical reasons, there is a high chance that the upgrade fails. If you want to upgrade your distribution, you should update the base image your Dockerfile rely on.</p>

<p>Now let&rsquo;s see how to build the first container in a Dockerfile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>FROM ubuntu:precise #the base image of this build script&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>RUN apt-get install -y memcached&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Well&hellip;that&rsquo;s all. You know have a container with memcached installed.</p>

<p>I kept this Dockerfile minimalistic on purpose, but you will want to define the maintainer of the Dockerfile with the tag <code>MAINTAINER</code>, define the default process to launch with <code>CMD</code> and a lot of other useful instructions.
For now I will stick to this version.</p>

<p>I would like to focus your attention on a point: each RUN instruction will commit the current layer and create a new one upon it. <strong>The state of the memory is forgotten</strong> between two <code>RUN</code> instructions. Only the filesystem is kept.</p>

<p>To build an image, you put these instructions in a file called <em>Dockerfile</em>, then execute the <code>build</code> command from the same folder:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo docker build .</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It will build the container and return its id. If you want to name the container when building, you can do it with the <code>-t</code> option</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo docker build -t ubuntu-memcached .</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You have seen a very quick introduction to Dockerfile. I will soon write an article about how to write a proper Docker image, following good practices, so that you can share them with your friends and the community!</p>
]]></content>
  </entry>
  
</feed>
