<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Yabage]]></title>
  <link href="http://pierre-jean.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://pierre-jean.github.io/"/>
  <updated>2016-07-22T18:41:14+01:00</updated>
  <id>http://pierre-jean.github.io/</id>
  <author>
    <name><![CDATA[Pierre-Jean Baraud]]></name>
    <email><![CDATA[pierre-jean@baraud.fr]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TTY: Under the Hood]]></title>
    <link href="http://pierre-jean.github.io/blog/2016/07/08/journey-to-the-tty/"/>
    <updated>2016-07-08T12:00:00+01:00</updated>
    <id>http://pierre-jean.github.io/blog/2016/07/08/journey-to-the-tty</id>
    <content type="html"><![CDATA[<p>It all started with the simple instruction: <code>-t</code> <em>flag assigns a pseudo-tty or terminal inside the new container</em>&hellip; and a moment of puzzlement&hellip; <em>What is exactly a pseudo TTY?</em> <em>What does it mean to attach or detach a process from it?</em></p>

<p><img class="center" src="/images/linux/gnome-terminal.png"></p>

<p>Beware my friend, for this article will lead you into the depths of forgotten history, guiding you through arcane kernel mechanisms. But persevere and the pure light of knowledge will shine upon you by the end of this journey.</p>

<!-- More -->


<h2>The origin of the myth: the Teletype</h2>

<p>When you go all Neo from Matrix by popping up a fancy green terminal to impress your friends around (what do you mean, <em>&ldquo;nobody does that&rdquo;</em>?), you are actually playing with the legacy of a very old device that few have ever seen in their lives: the Teletype.</p>

<h3>A legendary object</h3>

<p><img class="center" src="/images/linux/teletype-model-28.jpg"></p>

<p>Do you see this beauty in the picture? That&rsquo;s a Teletype. A <em>model 28</em> by <em>Teletype Corporation</em> to be precise. However there are countless models built by many different forgotten companies. The history of teletypes finds its roots in initial experimentation during the late 1800s, but truly began in the 1920s approaching an end in the 70s when fax technology began to be good enough to replace them.</p>

<p>A teletype is basically a machine that sends letters you typed on the keyboard through electric signals to another machine or network, and prints (literally prints, on paper!) letters received through the reception cable. Obviously, the different models evolved with time to offer more features and performance possibilites:</p>

<ul>
<li>Use of <em>Multiplex signal</em>, in order to allow the usage of one physical cable to send and receive messages</li>
<li>Support of <em>punched card</em> to send prepared messages at full speed without the need of typing them</li>
<li>Use of video screen (you&rsquo;re welcome, trees!)</li>
<li>Increase of speed (from 50 baud to 150000 baud)</li>
</ul>


<p>At the time this type of machine was the best way to transmit data in fast and reliable way.</p>

<h3>Stop your boring old gibberish&hellip; Why the heck are you telling me about this?</h3>

<p>Because instead of building new devices to interact with computers, pragmatic people at the time decided to reuse existing teletypes to connect to them.
Listen very carefully, I&rsquo;m not talking here about the <em>Personal Computer</em> (PC) you are familiar with. I&rsquo;m talking about a big, massive machine located in its own dedicated room to which you had no access if you were not cool enough, and where you had to send commands from the teletype and read the output printed back on the device.</p>

<p><img class="center" src="/images/linux/mainframe2.jpg"></p>

<p>Actually, one terminal was directly connected to the machine within the same room : <em>the console</em>. Man, I can&rsquo;t tell you about the kudos and props at being the lucky one behind the console. Well, I can&rsquo;t because I&rsquo;m not that old, but I&rsquo;m sure that it should have been a big deal back then.</p>

<p>Anyway, by now we&rsquo;ve realized a few things: for instance when using a terminal it&rsquo;s nice to see what you are typing. So what about asking the computer to echo back to us what it received, so that it is printed from our teletype? And what about erasing with backspace what has been typed? Yep, the computer at the end of the cable should take care of that for us, we&rsquo;re only using a dummy Teletype after all.</p>

<h3>Under the hood</h3>

<p>Here is a diagram of how a teletype interacted with a computer:</p>

<p><img class="center" src="/images/linux/teletype-mainframe-workflow.png"></p>

<ol>
<li>Each machine is -conceptually or physically- connected via two cables: one to send instructions to the computer and one to receive output from the computer.</li>
<li>These cables are connected to the computer through a serial cable plugged into an Universal Asynchronous Receiver and Transmitter (<em>UART</em>) that transforms the asynchronous flow of data into bytes words.</li>
<li>The computer has an UART driver to read for the hardware device.</li>
<li>The sequence of characters is passed to the line discipline. The line discipline will be in charge of converting special characters (like <em>end of line</em>, <em>backspaces</em>), and echoing (reprinting) what has been received back to the teletype, so that the user can visualize what he/she types.</li>
<li>The flow of instruction is passed to the TTY driver, that then passes them to the <em>foreground</em> processes for the <em>session</em> associated with this TTY. Indeed, as a user, you can execute several processes in parallel, but only interact with one at a time, letting the others working (or waiting) in the background.</li>
</ol>


<p>The whole stack as defined above is called a <em>TTY device</em>, and several ones can exist at the same time for a computer. So different line disciplines can be set for different devices, each TTY having its own foreground job, etc.</p>

<h2>From the Teletype to the Terminal</h2>

<p>Besides unpredictable haircuts and memorable rythms, the 80s have also brought us what they called <em>intelligent terminals</em>. Slowly, terminals evolved to become badass devices, with screen, memory, and even small processors to manage specific features on their side.</p>

<p><img class="center" src="/images/linux/terminal_vt100.jpg"></p>

<p>They started to <em>look like</em> your current PC desktop. But Beware they are in no way comparable! They are still dummy objects, despite their name. They do not compute things on their own: managing fancy colors and having a fast refresh frequency is far from being even close to a computer. It&rsquo;s the 80s after all, it&rsquo;s hard to call anything from that period of time smart&hellip;</p>

<p>These devices worked in the same way as teletypes, but also introduced some new features that needed supported from the software to be managed correctly (colors, special movements, etc).</p>

<h2>Wake up Neo, it is all virtual</h2>

<p>The massive set of wardrobes that used to constitute a computer gradually shrunk in size to a nice little box that you could fit under your desk. And there were no more endless terminals connected to it, only one monitor and one keyboard. Nevertheless, your current Linux machine keeps emulating several (usually 7 by default) terminals connected to your hardware. But to protect you from the effort of getting up and physically going to another chair, the OS allows you to switch from one terminal to another by a simple press of keys (<code>Ctrl</code>+<code>Alt</code>+<code>F1</code> to <code>Ctrl</code>+<code>Alt</code>+<code>F7</code>). This feature is called <em>virtual terminals</em>, and is represented by the files <code>/dev/tty1</code> to <code>/dev/tty7</code>. You can see any of these files as a duplex cable connected to a terminal. If you write to it, you send the information to be printed to the terminal. If you read from it, you receive what is typed from the terminal (try it, it works).</p>

<p><img class="center" src="/images/linux/virtual-terminal-workflow.png"></p>

<p>When you switch from one virtual terminal to another, the OS detaches your <em>seat</em> (a set of input and output devices like monitor, keyboard, mouse, etc. representing the hardware interface with the user) from the first virtual terminal and attaches it to the one requested by your shortcut. The processes from the first virtual terminals keep running, writing and reading from their virtual tty file (<code>dev/tty1</code> for instance), but this file won&rsquo;t receive any event from the seat and won&rsquo;t be able to send output to the seat. The information will be buffered instead (until your reattach your seat to this terminal), making the switch between sessions transparent for running jobs.</p>

<h2>I know no master</h2>

<p><img class="center" src="/images/linux/matrix-operator.jpg"></p>

<p>Yet I imagine only a few of you are actually using the virtual tty just mentioned. You are usually using a terminal console application launched from a graphic environment that is itself launched from a virtual terminal (yep, take a deep breath and read that again).</p>

<p>So when you launch your favorite terminal emulator like <em>xterm</em> or <em>gnome-terminal</em>, how do the processes know where to write the output, and where to get the input from?</p>

<p><img class="center" src="/images/linux/ptmx-pts-workflow.png"></p>

<p>Basically, when you launch a terminal within a graphic environment like this, it will spawn its own equivalent of <code>/dev/ttyX</code>: the terminal emulator will open a special file located in <code>/dev/ptmx</code>, called the <em>master side</em> of the <em>pts</em>, will work some magic with <code>ioctl</code> function, which will create a <em>slave side</em> of the pts in <code>/dev/pts/X</code>.</p>

<p>The processes running in the session will be attached to this file, that will behave like any file from the virtual terminal, except that there is no attachment to a seat: you can open several terminal emulator windows at the same time and display them side by side, having different sessions running in parallel.</p>

<h2>Going further</h2>

<p>We could dig into the topic endlessly, discussing the function <code>ioctl</code>, detailing how the kernel handles the session, expressing our endless admiration for the great 70s look of the <a href="http://terminals.classiccmp.org/wiki/images/f/fb/DEC_VT05_121708587772-2.jpg">DEC VT05</a> terminal&hellip;
But we should keep some for further articles, and there are anyway plenty of great resources already available if you are interested. To share a few:</p>

<ul>
<li><a href="http://www.linusakesson.net/programming/tty/">the TTY demystified, by Linus Åkesson</a>: Simply <em>the</em> reference on the topic, that will also explain signals, processes, etc.</li>
<li><a href="https://dvdhrm.wordpress.com/2013/08/24/session-management-on-linux/">Ponyhof&rsquo;s session management</a> and <a href="https://dvdhrm.wordpress.com/2013/08/24/how-vt-switching-works/">vt-switching</a> articles: Great to understand the session and seats concepts.</li>
<li><a href="http://unix.stackexchange.com/questions/117981/what-are-the-responsibilities-of-each-pseudo-terminal-pty-component-software">Unix StackExchange</a> Stéphane Chazelas' answer, that makes a lot of effort to clarify what was initially confusing for me.</li>
</ul>


<p>I realize I took a lot of shortcuts in this article and it would be natural that some part suggest greater depths to be explored. So if you have any question or need further details, please leave a comment, I will try my best to provide a clear answer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Boot Process in a Nutshell]]></title>
    <link href="http://pierre-jean.github.io/blog/2014/06/04/linux-boot-process/"/>
    <updated>2014-06-04T19:41:30+01:00</updated>
    <id>http://pierre-jean.github.io/blog/2014/06/04/linux-boot-process</id>
    <content type="html"><![CDATA[<p>I&rsquo;m getting more and more interested in how my system works &ldquo;under the hood&rdquo; lately. These fundations are essential to understand some behaviors / technical choices in technologies oriented for end users (such as <a href="http://docker.io">Docker</a>).</p>

<p>That&rsquo;s why I decided to write, mostly as a reminder for myself, a serie of articles explaining some fundamental Linux mechanisms. As I have to start somewhere, I&rsquo;ll start with the boot process.</p>

<!-- More -->


<p><strong>Disclaimer: I will assume the machine is running with BIOS and Grub as bootloader. If you would like to have explanation for other type of configuration, with UEFI for instance, please let a comment to request such article.</strong></p>

<h2>Power on : BIOS POST execution</h2>

<p>When you switch on your computer, the processor doesn&rsquo;t know anything about its environment. So it will executes the instruction located in a predefined memory location (<code>FFFF:0000h</code> in X86 based computers).</p>

<p>The instructions will redirect to another memory location, which is mapped to the <strong><a href="https://en.wikipedia.org/wiki/BIOS">BIOS</a> memory</strong>.</p>

<p>Indeed, when booting, the processor runs in a mode called <strong>real mode</strong>. In this mode, the processor access directly the memory via addresses starting from 0 to 1MB (<code>0xFFFFF</code>). But this memory is not mapped entirely to the <em><a href="https://en.wikipedia.org/wiki/RAM">RAM</a></em> memory. Some addresses are mapped to the <em>BIOS memory</em>, and other to the <em>legacy video card memory</em>.</p>

<p>The BIOS instructions will then be executed.</p>

<p><img src="/images/linux/boot_00.png"></p>

<p>The first BIOS action is the <strong>POST (Power On Self Test)</strong>. The POST will check the presence and integrity of a set of important hardware devices, and inform you if it detect defects (with a series of <em>bip</em> sound).</p>

<h2>Reading the CMOS and choose the bootable device</h2>

<p>You cannot modify the BIOS instructions by yourself (without flashing it), but in order to save some information (time, user preferences), the motherboard is shipped with a memory called <em>CMOS</em>.</p>

<p>The CMOS will contains for instance an ordered list for the bootable devices.
The BIOS will check the presence of each device from this list, and also if it contains a bootable media.</p>

<p><img src="/images/linux/boot_01.png"></p>

<p>Let&rsquo;s say that the bootable media is a hard drive for the rest of the explanation.</p>

<h2>Grub stage 1</h2>

<p>A hard drive contains a limited space in their first sector called <strong>Master Boot Record (MBR)</strong>. This MBR contains only 512 Bytes. And in theses 512 Bytes must enter:</p>

<ul>
<li>The instructions to boot the system (446 Bytes)</li>
<li>The information about the partitions of the hard drive (64 Bytes)</li>
<li>A checksum to verify the integrity of the MBR, called <em>Magic Number</em> (2 Bytes)</li>
</ul>


<p>The fact that the MBR is so small will lead to many difficulties: will the code to load the Linux kernel fit in this 446 Bytes? This limited size is also the reason why you can only have 4 primary partitions (4 descriptions of 16 Bytes), limited to 8GB or 2TB depending on the method they are described (<em>CHS</em> vs <em>LBA</em>).</p>

<p><img src="/images/linux/boot_02.png"></p>

<p>To solve that, the boot process is done in several steps. The first step will load the instructions from the 446 Bytes length <strong>primary boot loader code</strong> and execute it. This is called the Grub Stage 1. <strong><a href="https://www.gnu.org/software/grub/">GRUB</a></strong> is what we called a <em>boot loader</em>.</p>

<h2>Grub stage 1.5</h2>

<p>The partitions start at sector 63. The MBR is written in sector 0. This area between the MBR and the beginning of partitions is called <strong>MBR GAP</strong>. GRUB uses this space to put some extra code in it.</p>

<p>The code in <em>GRUB stage 1</em>, doesn&rsquo;t know how to read a Linux partition, and as a consequence load the kernel image that is inside. That&rsquo;s why the <em>GRUB stage 1</em> load the content of the <em>MBR GAP</em>, which contains instructions for opening a Linux partition.</p>

<p><img src="/images/linux/boot_03.png"></p>

<p>The execution of the code of the <em>MBR GAP</em> is called <strong>Grub stage 1.5</strong>.</p>

<h2>Grub stage 2</h2>

<p>But a part of the Grub configuration is modified by the user in configuration files located inside the Linux partition. That&rsquo;s why <em>Grub stage 1.5</em> needs to open the partition (the one that is called <em>active</em>) and read the file <code>/boot/grub/grub.cnf</code>.</p>

<p><img src="/images/linux/boot_04.png"></p>

<p>When this is done, the Grub is in <em>stage 2</em>, and can prompt an interface to let the user make choices (such as choosing which kernel to load or add boot options parameters).</p>

<h2>Kernel Boot execution</h2>

<p>The Linux kernels are located in the <code>/boot</code> folder, and have name such as <code>vmlinuz-x.xx.x-xx-[...]</code>. These kernels are compressed files, that contains a <em>generic</em> core Linux kernel (if you didn&rsquo;t build it yourself). As this kernels have been generated by other people, who don&rsquo;t know the specificity of your configuration, some modules (as drivers) can be missing.</p>

<p>That&rsquo;s why you can also find in the <code>/boot</code> folder image called <code>initrd.img-x.xx.x-xx-[...]</code>. An <em>initrd</em> file is a temporary file-system that will be mounted during the boot process, and that will load the missing modules in the kernel. It allows to keep the kernel images small and to load dynamically only what is needed.</p>

<p><img src="/images/linux/boot_05.png"></p>

<p>The vmlinuz files are executables files, that are actually composed of different chunks (<code>bootsect.o</code> + <code>setup.o</code> + <code>misc.o</code> + <code>piggy.o</code>). The <code>piggy.o</code> contains the gzipped vmlinux file. The processor is still in <em>real mode</em> which mean it can only address a memory area of 1 MB. The problem is that the compressed image is bigger than 1 MB. That&rsquo;s why the property of <em>bzImage</em> that allows to split the image in discontinuous area is convenient here. The <code>piggy.o</code> chunk is loaded outside the 1MB area zone (by switching the processor to protected mode), and the <code>bootsect.o</code>, <code>setup.o</code>, and <code>misc.o</code> will be load in the <em>real mode</em> map area.</p>

<p>The <code>bootsect.o</code> contains a legacy code that is now ignored (used to be the bootloader code for the <em>MBR</em>), and <code>setup.o</code> and <code>misc.o</code> initialize some variables and configuration (memory, video). After that the CPU pass into <strong>protected mode</strong>.</p>

<p>In <em>protected mode</em>, the CPU can address up to 4GB of memory, and can finally execute the <code>decompress_kernel()</code> instruction, that will uncompress the kernel image and mount the system layout, for finally launch the <strong>init process</strong>.</p>

<p>The <strong>init</strong> process is the first process launched in user space, and has the responsibility to launch all other needed services.</p>

<p>Historically, it was the <strong><a href="https://en.wikipedia.org/wiki/Sysvinit">SysVinit</a></strong> that did this job, but some distribution use <strong><a href="https://en.wikipedia.org/wiki/Upstart">Upstart</a></strong>, or the new <strong><a href="https://en.wikipedia.org/wiki/Systemd">Systemd</a></strong>. All these solutions work really differently (and would deserve a dedicated article), but they all get the same job done: launching all other needed user processes to start the system.</p>

<h2>Sources</h2>

<p>I based my understanding of the boot process from these great articles:</p>

<ul>
<li><a href="http://www.dewassoc.com/kbase/hard_drives/master_boot_record.htm">The Master Boot Record by Dewassoc</a></li>
<li><a href="http://www.slashroot.in/linux-booting-process-step-step-tutorial-understanding-linux-boot-sequence">Linux Booting Process by Slashroot</a></li>
<li><a href="http://duartes.org/gustavo/blog/post/kernel-boot-process/">Kernel Boot Process by Gustavo Duarte</a></li>
</ul>


<p>And also thanks to many articles of <a href="https://en.wikipedia.org">Wikipedia</a> and answers of the <a href="https://unix.stackexchange.com/">Unix and Linux StackExchange</a> community.</p>

<p>For any opinion, correction or question, feel free to comment!</p>
]]></content>
  </entry>
  
</feed>
